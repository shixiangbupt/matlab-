%% 迭代与方程求根 
% shixiangbupt@qq.com
%
% 20151122
%% 迭代思想
% 是数学计算和工程计算中一种非常重要的思想工具。一个简单的函数可能产生非常复杂的现象。如混沌，蝴蝶效应，
% 分形学，等都和迭代息息相关。

%% 
% 迭代就是某个过程不断重复。你走路，吃饭，就是不断重复的过程。数学上迭代意味着函数作用的不断重复。
% 给定函数方程 $f(x)=0$ , $f(x)$ 可能非常复杂，甚至没有解析表达式。为了求出该方程的根，假设通过函数作图找到该
% 函数与X轴的交点的一个近似值 $x_0$ 。定义数列。
% 
% $$x_{n+1}=f(x_n),n=0,1,2,\cdots$$
% 由上式产生的数列称为函数在 $x_0$ 点的一个迭代序列。

%%
% 函数迭代看似简单，但实际上是一个非常复杂的过程，可以将一个错综复杂的非线性函数离散化。通过函数迭代，可以
% 求得方程的数值解。由此产生了数学的两个非常重要的分支---分形理论和混沌理论。
% 给定实函数 $y=g(x)$ ,求解方程 $g(x)=0$ 的一个实根。记 $f(x)=x-g(x)$ ,等价于 $x=f(x)$ .
% 对于任意给定的初值 $x_0$ ，通过迭代就产生了数列 $x_0,x_1,\cdots$。
%%
% # 于是问题转换为选取适当的初值 $x_0$ ，通过迭代使得迭代数列收敛。
% # 如果上述数列收敛，那么极限点又在何处，如何计算。
% # 对于选取不同的初始值，迭代数列的收敛性是否一致？

%%
% 我们习惯称迭代的初始点为种子，种子通过函数 $f(x)$ 产生的序列称为一个轨道。轨道的类型有：
%%
% 
% # 固定型：相当于常量函数
% # 最终固定型：
% # 周期型：
% # 最终周期型：
% # 递增型：
% # 递减型：
% # 混沌型：在某直线上下随机地“跳跃”。如，点 $x_0=0.6$ 在函数 $f(x)=4x(1-x)$ 作用下的轨道就随机不规则。

%%
% 即使是最简单的稳定点，也有很多特征：吸引子，排斥子，中性子。若 $|f'(x)|<1$ ，那么函数 $f(x)$ 会将种子周围的点尽可能拉近。
% 如, $f(x)=2x(1-x)$ 对于稳定点0.5是吸引子；对于稳定点0是排斥子；函数 $x-x^2$ 对于稳定点0是中性子。

 

%% 一维动力系统
% 函数族 $f(x)=x^2+p$ ，参数p可取不同的值, $f(x)$ 在p=2时，只有一个吸引子，而在p=1.5时可能会出现两个排斥子。
% 对于初始值 $x_0=0$ 参数 $p=-1.4$ 时，轨道周期为32，而 $p=-1.4015$ 时，轨道周期为无穷大，这就是典型的混沌现象。
% 混沌具有：貌似不规则，实为有序；自组织，自生成；依赖于初始条件或控制参数；短期内可用于精确预测；确定性过程，可表示为初始条件下的方程；非线性系统；非线性反馈。

%%
% 混沌现象的一个主要特征是对初始条件的敏感性。一个微小的历史事件可能会导致一个巨大的意想不到的长期结果。
% 如罗马帝国的没落可能始于一个名不见经传的罗马士兵在某个战役某个时期的一个转身。这种敏感性，使得混沌的长效预测变得毫无意义。

%% 二分法解方程
% 假设 $f(x)$ 在区间[a,b]上连续，且 $f(a)f(b)<0$ 进行迭代，取区间中点 $x=\frac{a+b}{2}$ .
% x将区间划分为两个子区间 $[a,\frac{a+b}{2}]$ 和 $[\frac{a+b}{2},b]$ 保留端点异号的区间，则 $f(x)$
% 在此子区间上有根，持续这个过程，一定能找到函数的近似解。
syms x
f=@(x) x^2-2;
a=0,b=2;%这里采用硬编码，可以从键盘输入
k=0;
while abs(b-a)>eps*abs(b)
    x=(a+b)/2;
    if sign(f(x)) == sign(f(b))
        b=x;
    else
        a=x;
    end
    k=k+1;
end
x
% 二分法计算sqrt(2)有点慢。

%%
% eps不是matlab所能表示的最小的正数。楼主可以试试eps和eps/2，如果eps真的是最小的正数，那么eps/2就应该四舍五入到0或eps，但实际上却能精确表示出来。正确的说法是eps=eps(1)，是1的精度。也就是说matlab无法表示介于1和1+eps之间的数，这些数将被四舍五入到1或1+eps。比如1+0.3*eps被舍入到1，而1+0.7*eps被舍入到1+eps。楼主可以用下面的语句进行验证:
%
% 1+0.3*eps==1%true
%
% 1+0.7*eps==1%false
%
% 1+0.7*eps==1+eps%true
%
% 正如前面所说，对浮点数而言，越靠近0，精度就越高。因此2的精度就比1的精度要低。事实上，matlab无法区分介于2和2+2*eps之间的数。也就是说eps(2)=2*eps，下面是验证:
%
% 2+eps==2%true，说明matlab无法区分2和2+eps
% 
% 1+eps==1%false，说明matlab可以区分1和1+eps，因此1的精度比2高 
%
% 0的精度是最高的，也就是说eps(0)才是matlab所能表示的最小的正数。它和eps相比相差了300多个数量级，eps和它相比大的简直是个天文数字。
 
%% 牛顿迭代法
% 假定函数 $f(x)$ 具有连续导数，如果选取的初值点离真正的根太远，那么牛顿法可能不收敛。然而，当它收敛时，收敛速度比二分法快。
% 牛顿法是在函数上任意一点做切线，并确定与 $x$ 轴交点，假定初始值从 $x_0$ 开始，迭代规则如下：
% $x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}$ .
% k=0;xprev=0;eps=1.0e-5;
% while abs(x-xprev)>eps*abs(x)
%     xprev=x;
%     x=x-f(x)/fprime(x);
%     k=k+1;
% end
%%
% 若要计算平方根，sqrt(M), $f'(x)=2x$ ，此时 $x_{n+1}=x_n-\frac{x_n^2-M}{2x_n}=1/2(x_n+M/x_n)$

% 此时代码：
% while abs(x-xprev)>eps*abs(x)
%     xprev=x;
%     x=0.5*(x+M/x);
% end
% 现取初始值 $x=1,M=2$ ,计算根号2的结果。
clear
k=0;xprev=0;eps=1.0e-5;
x=1,M=2,xn=[];
while abs(x-xprev)>eps*abs(x)
    xprev=x;
    x=0.5*(x+M/x);
    disp(['根号2的近似值为：',num2str(x)]);
   % xn=[xn x];
end
%%
% 牛顿法只需6次迭代精度就可以到小数点后14位，而二分法同样的精度需要迭代25步以上。

%% 正切法
% 指定两个初始值 $x_0,x_1$ 。迭代规则如下：
% $$x_{n+1}=x_n-f(x_n)\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}$$ 
% 对应的matlab代码如下：
clear
% syms x
f=@(x) x^2-2;
a=1,b=2;
k=0;
while abs(b-a)>eps*abs(b)
    c=a;
    a=b;
    b=b+(b-c)/(f(c)/f(b)-1);
    k=k+1;
    disp(['根号2的近似值为：',num2str(a)]);
end
%%
% 计算根号2，取a=1，b=2.经过7次迭代，结果与牛顿法基本相同。
% 正切法的好处是不需计算导函数，但它的收敛性与牛顿法接近。

%% 运用符号计算工具
% 证明多项式 $f(x)=x^3-2x-5$ 在[2,3]上有一个实根和两个复根。
% 
syms x
solve('x^3-2*x-5',x)

%% 其他方法
c=[1 0 -2 -5];
roots(c)% 求三个根的近似值
syms x
% f(x)=x^3-2*x-5;
func=@(x)x^3-2*x-5;
fzero(func,[2,3],2) %找实根

    